import { ISetting } from "./isetting";
import { IDatabaseColumn, IDatabaseTable } from "./mysql-database-definition";
import { TableClass } from "./table-class";
import * as change_case from "change-case";

export default class InterfaceBuilder {
  constructor(private settings: ISetting, private mysqlTypes: { [key: string]: string }) {}

  public renderTs(tableClass: TableClass, table: IDatabaseTable): string {
    let enumBuilder = ''
    for (const colName in table) {
      if (table[colName].type === 'enum') {
        enumBuilder += this.buildEnum(table[colName], tableClass.className);
      }
    }

    let stringBuilder = this.settings.defaultClassModifier + " " + tableClass.prefixedClassName + " { \n";

    for (const colName in table) {
      stringBuilder += this.buildTypeRow(table[colName], tableClass.className);
    }
    stringBuilder += "}\n\n";

    return this.getMetaText() + stringBuilder + enumBuilder;
  }

  private getMetaText(): string {
    let meta = `/**\n * Autogenerated interface, DO NOT MODIFY\n */\n`;
    meta += "/* tslint:disable */\n\n";
    return meta;
  }

  private buildEnum(col: IDatabaseColumn, className: string): string {
    const pascalField = change_case.pascalCase(col.field)
    const tabs = "\t";

    const enums = col.enum.map(e => {
      return `${tabs}${e} = "${e}",\n`
    }).join('')

    return `export enum E${className + pascalField} {\n${enums}};\n\n`;
  }

  private buildTypeRow(col: IDatabaseColumn, className: string): string {
    const tabs = "\t";
    const optional = col.null ? "?" : "";
    const tsType = this.getTsType(col, className);
    const field = col.field;
    return `${tabs}"${field}"${optional}: ${tsType};\n`;
  }

  private getTsType(col: IDatabaseColumn, className: string): string {
    let ts = this.mysqlTypes[col.type];
    if (ts === 'enum') {
      const pascalField = change_case.pascalCase(col.field)
      return 'E' + className + pascalField
    }
    if (!ts) {
      console.error("Unknown type " + col.type);
      ts = "any";
    }
    return ts;
  }
}
