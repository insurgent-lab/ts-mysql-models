import fs, { readFileSync } from 'fs'
import Handlebars from 'handlebars'
import { IDatabaseTable, ISetting, ITable } from '../interfaces'

import { dirname, join } from 'path'
import { fileURLToPath } from 'url'

/* tslint:disable */
const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)
/* tslint:enable */

const modelTemplate = Handlebars.compile(readFileSync(join(__dirname, '../templates/model.tpl'), { encoding: 'utf-8' }))
const modelWithIdTemplate = Handlebars.compile(readFileSync(join(__dirname, '../templates/model_with_id.tpl'), { encoding: 'utf-8' }))

export default class ClassBuilder {
  constructor (private settings: ISetting, private mysqlTypes: { [key: string]: string }) { }

  public renderTs (tableClass: ITable, table: IDatabaseTable): string {
    const idField = this.getIdField(table)

    if (idField) {
      return modelWithIdTemplate({ idField, tableName: tableClass.tableName, className: tableClass.className })
    } else {
      return modelTemplate({ tableName: tableClass.tableName, className: tableClass.className })
    }
  }

  private getMetaText (): string {
    let meta = `/**\n * Autogenerated class, DO NOT MODIFY\n */\n`
    meta += '/* tslint:disable */\n\n'
    return meta
  }

  private getIdField (table: IDatabaseTable): string | boolean {
    const idCol = Object.values(table).find((field) => {
      return (field.isPrimary && field.extra.includes('auto_increment') && field.type === 'int')
    })

    return idCol
      ? idCol.field
      : false
  }
}
